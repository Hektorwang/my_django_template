[uwsgi]
# Placeholders are custom magic variables defined during configuration time by setting a new configuration variable of your own devising.
project_name = my_project

# set PYTHONHOME/virtualenv
home = /home/h/.pyenv/versions/3.8.10/lib/python3.8/site-packages

# chdir to specified directory before apps loading
chdir = %d
# load .wsgi file
wsgi-file = %d/%(project_name)/wsgi.py
# load a WSGI module
module = %(project_name).wsgi:application

# enable master process
master = true
# spawn the specified number of workers/processes
workers = 2
# spawn the specified number of workers/processes
processes = 2
# run each worker in prethreaded mode with the specified number of threads
threads = 2
# enable threads
enable-threads = true

# bind to the specified UNIX/TCP socket using default protocol
socket = %d/%n.sock
# chmod-socket
chmod-socket = 666

# create pidfile (before privileges drop)
pidfile = %d/%n.pid

# enable the stats server on the specified address
# stats = :9191
# bind to the specified UNIX/TCP socket using HTTP protocol
# http-socket = 0.0.0.0:8000
# add an http router/server on the specified address
# http = 0.0.0.0:8000
# map mountpoint to static directory (or file)
# static-map = /static=%d/static

# set harakiri timeout
harakiri = 60
# set internal buffer size
buffer-size = 2048
# enable post buffering
post-buffering = 2048

# limit processes address space/vsz
limit-as = 16
# reload workers after the specified amount of managed requests
max-requests = 32

# daemonize uWSGI
# daemonize = %d/log/%n.log
# disable request logging
# disable-logging = true

# try to remove all of the generated file/sockets
vacuum = true

# monitor python modules mtime to trigger reload (use only in development)
py-autoreload = 1
# set the maximum time (in seconds) we wait for workers and other processes to die during reload/shutdown
reload-mercy = 10

